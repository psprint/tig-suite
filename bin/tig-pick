#!/usr/bin/env zsh
#
# 'tig-pick' is a wrapper script that uses 'tig' to pick a Git commit from the
# history. On success, The script prints the ID of the commit to standard
# output, so that it can be used as a parameter for subsequent commands, e.g.
# 'git rebase -i $(tig-pick)'
#
# In order to be able to display the interface and to catch the commit ID
# (easily) at the same time, 'tig' has to be run with the standard and error
# output channels swapped.
#
# All parameters passed to the script will be forwarded to 'tig'.
#
0="${(%):-%x}"

set -e

typeset -g CONFIG=$(mktemp)
trap "command rm -f $CONFIG" EXIT 
trap "command rm -f $CONFIG; return 3" INT

# Prepare config file: source user config, if present
local XDG
if [[ -n $TIGRC_USER ]]; then
	print "source $TIGRC_USER" >>! "$CONFIG"
elif [[ -f $HOME/.tigrc ]]; then
	print "source $HOME/.tigrc" >>! "$CONFIG"
elif [[ -f ${XDG::=${XDG_CONFIG_HOME:-$HOME/.config}/tig/tigrc} ]]; then
	print "source $XDG">>!"$CONFIG"
fi

# Bind Enter to print the selected commit ID to error output and exit after
# that.
printf %s\\n "bind pager <Enter> <zsh -c 'printf \$0 >&2' %(text)">>!$CONFIG
printf %s\\n "source $TIG_SUITE_DIR/share/tig-colors.rc">>!$CONFIG

# Read all from stdin â†’ array
local qi="$(<&0)"
local -a qa=(${(f@)qi})

# Run tig with the standard and error output channels swapped.
export TIGRC_USER=$CONFIG
{
 stderr=$(command tig "$@" 3>&2 2>&1 1>&3 3>&-) || {
	local qc=$?
	print "$stderr" >&2
	exit $qc
 }
} < <(printf %s\\n $qa)

local qe=$(print "$stderr" | tail -n1)
# Repair long lines
qe=${${(M)qa:#$qe*}[1]}
print -r -- "$qe"
