#
# The commands that are provided by this plugin
#

###
### Various
###

bind generic <Ctrl-E> >zsh -c 'TIG_SCRIPT=<(print :bind generic q view-close) tig grep "%(prompt Searched pattern for grep view: )"'
bind pager o !zsh -c '$TIG_SUITE_DIR/bin/make-line-open.zsh $0' %(text)
bind pager ed !zsh -c '$TIG_SUITE_DIR/bin/make-line-open.zsh $0' %(text)

###
### Stash support
###

# Apply via `patch` tool
bind generic Zpa !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash ext %(commit) %(stash)'
# Apply via `patch` tool, REVERSED
bind generic ZRpa !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash extrev %(commit) %(stash)'
# Apply using `git stash apply`
bind generic Za !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash git %(commit) %(stash)'

# Reset stash name to a new one
bind stash Zres +zsh -c 'git stash drop %(stash); git stash store -m"%(prompt New stash name: )" %(commit)'

# Stash save keeping index
bind generic Zz +git stash --keep-index
# Stash only highlighted file
bind generic Zf +git stash push --keep-index -- "%(file)"
# Stash interactively for 1 file
bind generic Zif +git stash push -p -- "%(file)"
# Stash interactively
bind generic Ziz +git stash push -p
# Stash everything
bind generic ZZZ +git stash
# Stash keeping index and prompting for message
bind generic Zmz +git stash --keep-index -m "%(prompt Stash name: )"
# The same interactively
bind generic Zimz +git stash push -p -m "%(prompt Stash name: )"

# Different method of generating patch for `patch` command
bind generic Z1P !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash extoth1 %(commit) %(stash) "%(file)"'

# The same, but for whole saved diff (all files)
bind generic ZP !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash extoth %(commit) %(stash) "%(file)"'

# Reverse Z1P
bind generic ZR1P !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash extothrev1 %(commit) %(stash) "%(file)"'

# Reverse ZP
bind generic ZRP !zsh -c 'source $TIG_SUITE_GL&&patch/ti::apply-stash extothrev %(commit) %(stash) "%(file)"'

###
### Ctags support
###

# Tag browsing in a pager app like fzf,fzy and tig itself
bind generic x!b !zsh -c 'source $TIG_SUITE_GL&&ctags/ti::browse-tags'
# Using of possibly defined make targets
bind generic x!mt :!make tags
bind generic x!mc :!make ctags
# Provided configs for C language and Zsh/Bash/Sh scripts
bind generic x!tc !zsh -c 'source $TIG_SUITE_GL&&ctags/ti::create-tags c TAGS'
bind generic x!tz !zsh -c 'source $TIG_SUITE_GL&&ctags/ti::create-tags zsh TAGS'
 
# The same but in vim-style `tags` index file
bind generic v none 
bind generic v!tc !zsh -c 'source $TIG_SUITE_GL&&ctags/ti::create-tags c tags'
bind generic v!tz !zsh -c 'source $TIG_SUITE_GL&&ctags/ti::create-tags zsh tags'

###
### Previous commands
###

# Free `e` key and route `edit` action back to `ed`
bind generic e none
bind generic ed edit
# Execute of past pager view commands
bind generic exe >!zsh  -c 'rm -f $TIG_SCRIPT;source $TIG_SUITE_GL&&feat/ti::run-task'

###
### Features
###

# Edit of `qu…eue` and of `fe…ature` files
bind generic equ !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::edit-external queue'
bind generic efe !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::edit-external features'
# View of files in queue
bind generic esq !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::show-files-general queue'
# View of files in commit
bind generic esc !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::show-files-general commit  "${${${${:-%(commit)}//$~TIZERO_PAT/}:-%(blob)}//$~TIZERO_PAT/}"'

#
# Feature creation
#

# `n`…ew`c`…commit → new feature from highlighted commit
bind generic enc !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::new-feature "%(prompt What name-ID to the new feature to give? )" "${${${${:-%(commit)}//$~TIZERO_PAT/}:-%(blob)}//$~TIZERO_PAT/}" "commit"'
# `n`…ew`q`…ueue → new feature from the queue/accumulator
bind generic enq !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::new-feature "%(prompt What name-ID to the new feature to give? )" "${${${${:-%(commit)}//$~TIZERO_PAT/}:-%(blob)}//$~TIZERO_PAT/}" "queue"'

#
# Saving in accumulator/queue
#

# 's'…a'v'…e current tree (of HEAD)
bind generic esvt !zsh -c 'source $TIG_SUITE_GL&&feat/ti::copy-files tree'
# 's'…a'v'…e from highlighted commit tree
bind generic esvT !zsh -c 'source $TIG_SUITE_GL&&feat/ti::copy-files tree-of-commit "${${${${${:-%(commit)}//$~TIZERO_PAT/}:-%(blob)}//$~TIZERO_PAT/}:-}"'
# 'q'…ueue'e'…mpty → prune queue/accumulator
bind generic eqe !zsh -c 'source $TIG_SUITE_GL&&print -n>!$TIPID_QUEUE&&timsg_ %B{208}Notice: {33}Emptied accu/queue-file $MSG3||timsg_ %B{205}Error: {137}Could not empty accu/queue-file'
# 's'…a'v'…e current file
bind generic esvf !zsh -c 'source $TIG_SUITE_GL&&feat/ti::save-file-to-PID-queue "%(file)"'
# 's'…a'v'…e files from picked °feature° into queue/accumulator
bind generic esvF !zsh -c 'source $TIG_SUITE_GL&&feat/ti::copy-files feature'
# 's'…a'v'…e files from picked commit into queue/accumulator
bind generic esvc !zsh -c 'source $TIG_SUITE_GL&&feat/ti::copy-files commit "${${${${${:-%(commit)}//$~TIZERO_PAT/}:-%(blob)}//$~TIZERO_PAT/}:-}"'

#
# Opening °features°
#

# Open feature after picking it in pager (from a list)
bind generic eopm !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::open-feature'
# Open feature after entering its name
bind generic eope !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::open-feature "%(prompt ID of the °feature° to open: )"'

#
# Renaming features
#

# Rename feature after picking it in pager (from a list)
bind generic erem !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::rename-feature tui'
# Rename feature after entering its name
bind generic eree !zsh  -c 'source $TIG_SUITE_GL&&feat/ti::rename-feature prompt "" "%(prompt ID of the °feature° to rename: )" "%(prompt New ID: )"'
