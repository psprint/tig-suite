.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "" "" "" "" ""
.hy
.SH Tig Suite
.PP
A plugin providing over 40 \f[C]bindkey\f[R] commands like
e.g.\ \f[C]x!b\f[R] \[en] Ctags browser directly within \f[C]tig\f[R].
.PP
Simply source \f[C]tig.plugin.(sh|zsh)\f[R] (\f[C]\&....sh\f[R] for
Bash) and you can use them instantly.
.SS Various commands
.SS Keys: exe
.PP
Execute one of past \[lq]:!\&...\[rq] or \[lq]:exec \&...\[rq] commands
after choosing one from a TUI like \f[C]tig\f[R] itself or
\f[C]fzf\f[R], etc.
.PP
[IMAGE: past
commands (https://raw.githubusercontent.com/psprint/tigsuite/main/img/past-commands.png)]
.SS Stash support
.SS Keys: Zpa
.PP
Apply selected stash with the \f[C]patch\f[R] utility.
It might get better results than the standard
\f[C]git stash apply \&...\f[R]
.SS Keys: ZRpa
.PP
The same, but reversed patch will be used.
.SS Keys: Za
.PP
Apply the stash normally with \f[C]git stash apply\f[R].
.SS Keys: Zz
.PP
Save a new stash keeping the staged changes.
.SS Keys: Zf
.PP
Save a new stash keeping the staged changes for currently highlighted
file \f[B]only\f[R].
.SS Keys: Zif
.PP
Save a new stash keeping the staged changes for currently highlighted
file \f[B]only\f[R]and do this \f[B]interactively\f[R].
.SS Keys: Ziz
.PP
Save a new stash keeping the staged changes and do this
\f[B]interactively\f[R].
.SS Keys: ZZZ
.PP
Uncodintionally stash all changes.
.SS Keys: Zmz
.PP
Save a new stash keeping the staged changes, with a custom message (will
get prompted).
.SS Keys: Zimz
.PP
Save a new stash keeping the staged changes, with a custom message (will
get prompted), \f[B]interactively\f[R].
.SS Keys: Z1P
.PP
Apply the stash changes for a single file (currently highlighted), with
a different method.
.SS Keys: ZP
.PP
Apply the stash changes with the \f[C]patch\f[R] utility, with a
different method of generating the changes
(\f[C]git diff stash\[ha]1 stash\f[R]).
.SS Keys: ZR1P
.PP
The same as \f[C]Z1P\f[R], but the patch is reversed.
.SS Keys: ZRP
.PP
The same as \f[C]ZP\f[R], but the patch is reversed.
.SS Ctags support
.SS Keys: x!b
.PP
Browse all the tags from \f[C]TAGS\f[R] index file with a TUI helper
app, and open \f[C]$EDITOR\f[R] on it.
.PP
[IMAGE: tags (https://raw.githubusercontent.com/psprint/tigsuite/main/img/tags.png)]
.SS Keys: x!mt
.PP
Run \f[C]make tags\f[R] in the repo (should generate \f[C]TAGS\f[R]
index file).
.SS Keys: x!mc
.PP
Run \f[C]make ctags\f[R] in the repo (should generate \f[C]TAGS\f[R]
index file).
.SS Keys: x!tc
.PP
Run a curated \f[C]ctags --languages=C \&...\f[R] command that creates
\f[C]TAGS\f[R] file with symbols from any C source file (\f[C].c\f[R],
\f[C].h\f[R]).
\[at]universal-ctags/ctags is required.
.SS Keys: x!tz
.PP
Run a curated \f[C]ctags --languages=Zsh,Sh \&...\f[R] command that
creates \f[C]TAGS\f[R] file with symbols from any shell source file
(\f[C].sh\f[R], \f[C].zsh\f[R], \f[C].bash\f[R]).
\[at]universal-ctags/ctags is required.
.SS Keys: v!tc
.PP
The same as \f[C]x!tc\f[R], but with Vim-style \f[C]tags\f[R] index
file.
.SS Keys: v!tz
.PP
The same as \f[C]x!tz\f[R], but with Vim-style \f[C]tags\f[R] index
file.
.SS Keys: ed
.PP
Runs the \f[C]$EDITOR\f[R] on current file and line.
The same as original \f[C]e\f[R] key.
.SS Support for \[de]features\[de]
.PP
One often needs to open a group of files that associate with the feature
that one works on.
DIfferent feature \[<>] different group of files.
TigSuite provides a support for this \[em] \[de]features\[de] are named
groups of files, which can be opened in editor, by picking up in tig:
.PP
[IMAGE: features (https://raw.githubusercontent.com/psprint/tigsuite/main/img/features.png)]
.PP
or by any other tool like \f[C]fzf\f[R].
Set \f[C]$TICHOOSE_APP\f[R] to change from the default (\f[C]tig\f[R]).
It\[cq]s possible to create one from: - commit \[en] all files changed
by commit become a \[de]feature\[de], - accumulator/queue \[en] all
files added to a side-buffer become a \[de]feature\[de]; you can add
single files to it, or files of commit, or files from the current tree
of files, etc.
.SS Keys: equ
.PP
Edit the current accumulator/queue (in $EDITOR).
.SS Keys: efe
.PP
Edit the file where all \[de]features\[de] are saved (in $EDITOR).
.SS Keys: esq
.PP
View files in queue, in \f[C]tig\f[R].
.SS Keys: esc
.PP
View files in commit, in \f[C]tig\f[R].
.SS Keys: enq
.PP
Create a new \[de]feature\[de] from accumulator/queue.
.SS Keys: enc
.PP
Create a new \[de]feature\[de] from commit.
.SS Keys: esvt
.PP
Create a new \[de]feature\[de] from tree (HEAD).
.SS Keys: esvT
.PP
Create a new \[de]feature\[de] from tree (current commit).
.SS Keys: eqe
.PP
Empty the queue.
.SS Keys: esvf
.PP
Save file in queue.
.SS Keys: esvF
.PP
Save all files in given \[de]feature\[de] to the queue.
.SS Keys: esvc
.PP
Save files in commit to the queue.
.SS Keys: eopm
.PP
Open \[de]feature\[de] in \f[C]$EDITOR\f[R], after picking (from
\f[C]tig\f[R], \f[C]fzf\f[R], etc.).
.SS Keys: eope
.PP
Open \[de]feature\[de] in \f[C]$EDITOR\f[R], after entering its name in
prompt.
.SS Keys: erem
.PP
Rename \[de]feature\[de] \[en] menu (\f[C]tig\f[R], \f[C]fzf\f[R],
etc.).
.SS Keys: eree
.PP
Rename \[de]feature\[de] \[en] prompt.
.SS Installing
.PP
Simply clone the repo and source \f[C]tigsuite.plugin.sh\f[R] (Bash) or
\f[C]\&....zsh\f[R] (Zsh), or use any Zsh plugin manager.
